/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * FIO API
 * FIO REST API. 
Instructions for testing the API:
 1) Click on /auth/login endpoint
 2) Click the `Try it out` button
 3) Enter your credentials into the JSON payload
 4) Copy the resultant value for `AuthToken` (the GUID inside the quotes)
 5) Click on `Authorize` and paste in the AuthToken
 6) Commands with the lock icon will now function, assuming appropriate parameters/settings are present

 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
export type GetProductionUserNamePlanet200Item = { [key: string]: any };

export type GetCsvCxosParams = {
/**
 * An API key with read permissions for the given user
 */
apikey: string;
/**
 * The username to retrieve information for
 */
username: string;
};

export type GetCsvWorkforceParams = {
/**
 * An API key with read permissions for the given user
 */
apikey: string;
/**
 * The username to retrieve information for
 */
username: string;
};

export type GetCsvSitesParams = {
/**
 * An API key with read permissions for the given user
 */
apikey: string;
/**
 * The username to retrieve information for
 */
username: string;
};

export type GetCsvBurnrateParams = {
/**
 * An API key with read permissions for the given user
 */
apikey: string;
/**
 * The username to retrieve information for
 */
username: string;
};

export type GetCsvInventoryParams = {
/**
 * An API key with read permissions for the given user
 */
apikey: string;
/**
 * The username to retrieve information for
 */
username: string;
};

export interface UserSettingsBurnRateExclusion {
  PlanetNaturalId?: string;
  MaterialTicker?: string;
}

/**
 * A BurnRateExclusion
 */
export type UserSettingsBurnRateExclusionBody = UserSettingsBurnRateExclusion;

export interface SystemStarsJumpRoute {
  SourceSystemId?: string;
  SourceSystemName?: string;
  SourceSystemNaturalId?: string;
  DestinationSystemId?: string;
  DestinationSystemName?: string;
  DestinationSystemNaturalId?: string;
  /** Distance is in parsecs */
  Distance?: number;
}

export interface RecipeMinimalOutput {
  Ticker?: string;
  Amount?: number;
}

export interface RecipeMinimalInput {
  Ticker?: string;
  Amount?: number;
}

export interface RecipeMinimalRecipe {
  BuildingTicker?: string;
  RecipeName?: string;
  Inputs?: RecipeMinimalInput[];
  Outputs?: RecipeMinimalOutput[];
  /** Time in milliseconds */
  TimeMs?: number;
}

export interface RainStorage {
  NaturalId?: string;
  Name?: string;
  Type?: string;
  Ticker?: string;
  Amount?: number;
}

export interface RainPlanetWorkforce {
  NaturalId?: string;
  Workforce?: string;
  Population?: number;
  Capacity?: number;
  Required?: number;
  Satisfaction?: number;
}

export interface RainPlanetProductionOutput {
  /** The right-hand side hash is the first 8 characters of the Production id */
  OrderId?: string;
  Material?: string;
  Count?: number;
}

export interface RainPlanetProductionInput {
  /** The right-hand side hash is the first 8 characters of the Production id */
  OrderId?: string;
  Material?: string;
  Count?: number;
}

export interface RainPlanetProduction {
  NaturalId?: string;
  /** The building name (not Ticker) */
  Type?: string;
  /** The right-hand side hash is the first 8 characters of the Production id */
  Id?: string;
  /** Percentage complete of this production line */
  Completed?: number;
  /** The amount of time remaining until production completion in milliseconds */
  Remaining?: number;
}

export interface RainPlanetBuildingReclaimable {
  /** The right-hand side hash is the first 8 characters of the BuildingId */
  BuildingId?: string;
  Material?: string;
  Amount?: number;
}

export interface RainPlanetBuilding {
  NaturalId?: string;
  /** The right-hand side hash is the first 8 characters of the BuildingId */
  Id?: string;
  Ticker?: string;
  /** This is a long integer which represents epoch time in milliseconds */
  Created?: number;
  /** The condition of the building */
  Condition?: number;
}

export interface RainUserPlanet {
  NaturalId?: string;
  /** Name will match NaturalId if the planet is not named */
  Name?: string;
}

export interface RainLiquid {
  Source?: string;
  Currency?: string;
  Amount?: number;
}

export interface RainPlanetResource {
  Key?: string;
  Planet?: string;
  Ticker?: string;
  /** Can be any of the following:
1) MINERAL
2) LIQUID
3) GASEOUS
 */
  Type?: string;
  /** The factor at which extraction occurrs.  To get daily extraction:
- GASEOUS: Factor * 0.60
- LIQUID: Factor * 0.70
- MINERAL: Factor * 0.70
 */
  Factor?: number;
}

export interface RainRecipeOutput {
  Key?: string;
  Material?: string;
  Amount?: number;
}

export interface RainRecipeInput {
  Key?: string;
  Material?: string;
  Amount?: number;
}

export interface RainPrices {
  /** The Ticker */
  Ticker?: string;
  /** The Market Maker buy (if present) */
  MMBuy?: number;
  /** The Market Maker sell (if present) */
  MMSell?: number;
  /** The price average of the material on the CI1 exchange */
  'CI1-Average'?: number;
  /** The amount of items available for the lowest asking price */
  'CI1-AskAmt'?: number;
  /** The lowest asking price */
  'CI1-AskPrice'?: number;
  /** The amount of items listed available for buy across all ads */
  'CI1-AskAvail'?: number;
  /** The amount of items requested for the highest bid price */
  'CI1-BidAmt'?: number;
  /** The highest bid price */
  'CI1-BidPrice'?: number;
  /** The amount of items requesting to buy across all ads */
  'CI1-BidAvail'?: number;
  /** The price average of the material on the NC1 exchange */
  'NI1-Average'?: number;
  /** The amount of items available for the lowest asking price */
  'NI1-AskAmt'?: number;
  /** The lowest asking price */
  'NI1-AskPrice'?: number;
  /** The amount of items listed available for buy across all ads */
  'NI1-AskAvail'?: number;
  /** The amount of items requested for the highest bid price */
  'NI1-BidAmt'?: number;
  /** The highest bid price */
  'NI1-BidPrice'?: number;
  /** The amount of items requesting to buy across all ads */
  'NI1-BidAvail'?: number;
  /** The price average of the material on the IC1 exchange */
  'IC1-Average'?: number;
  /** The amount of items available for the lowest asking price */
  'IC1-AskAmt'?: number;
  /** The lowest asking price */
  'IC1-AskPrice'?: number;
  /** The amount of items listed available for buy across all ads */
  'IC1-AskAvail'?: number;
  /** The amount of items requested for the highest bid price */
  'IC1-BidAmt'?: number;
  /** The highest bid price */
  'IC1-BidPrice'?: number;
  /** The amount of items requesting to buy across all ads */
  'IC1-BidAvail'?: number;
}

export interface RainMaterial {
  Ticker?: string;
  Name?: string;
  Category?: string;
  Weight?: number;
  Volume?: number;
}

export interface RainBuildingRecipe {
  Key?: string;
  Building?: string;
  Duration?: number;
}

export interface RainBuildingWorkforce {
  Key?: string;
  Building?: string;
  Level?: string;
  Capacity?: number;
}

export interface RainBuildingCost {
  Key?: string;
  Building?: string;
  Material?: string;
  Amount?: number;
}

export interface RainBuilding {
  Ticker?: string;
  Name?: string;
  Area?: number;
  Expertise?: string;
}

export interface LocalMarketSearch {
  SearchBuys?: boolean;
  SearchSells?: boolean;
  Ticker?: string;
  CostThreshold?: number;
  SourceLocation?: string;
}

export interface PlanetSearchRequest {
  Materials?: string[];
  IncludeRocky?: boolean;
  IncludeGaseous?: boolean;
  IncludeLowGravity?: boolean;
  IncludeHighGravity?: boolean;
  IncludeLowPressure?: boolean;
  IncludeHighPressure?: boolean;
  IncludeLowTemperature?: boolean;
  IncludeHighTemperature?: boolean;
  MustBeFertile?: boolean;
  MustHaveLocalMarket?: boolean;
  MustHaveChamberOfCommerce?: boolean;
  MustHaveWarehouse?: boolean;
  MustHaveAdministrationCenter?: boolean;
  MustHaveShipyard?: boolean;
  DistanceChecks?: string[];
}

export interface PlanetListItem {
  PlanetNaturalId?: string;
  PlanetName?: string;
}

export interface ChatListItem {
  DisplayName?: string;
  ChannelId?: string;
}

export interface AdminDisable {
  UserName?: string;
  Reason?: string;
}

export interface AdminCreate {
  UserName?: string;
  Password?: string;
  IsAdmin?: boolean;
}

export interface AuthCreateGroupResponse {
  GroupId?: number;
  GroupString?: string;
}

export interface AuthCreateGroupPayload {
  GroupId?: string;
  GroupName?: string;
  GroupUsers?: string[];
}

export interface AuthRevokeApiKey {
  UserName?: string;
  Password?: string;
  ApiKeyToRevoke?: string;
}

export interface AuthCreateApiKey {
  UserName?: string;
  Password?: string;
  AllowWrites?: boolean;
  Application?: string;
}

export interface AuthPermissionAllowance {
  UserName?: string;
  FlightData?: boolean;
  BuildingData?: boolean;
  StorageData?: boolean;
  ProductionData?: boolean;
  WorkforceData?: boolean;
  ExpertsData?: boolean;
  ContractData?: boolean;
  ShipmentTracking?: boolean;
}

export interface AuthChangePassword {
  OldPassword?: string;
  NewPassword?: string;
}

export interface AuthLoginResponse {
  AuthToken?: string;
  Expiry?: string;
  IsAdministrator?: boolean;
}

export interface AuthLoginAndPassword {
  UserName: string;
  Password: string;
}





  /**
 * Authenticates against FIO.
Any requests that require auth must have the response AuthToken as a HTTP header:
`Authorization`:`<AUTH_TOKEN_HASH>`

 * @summary Login to FIO
 */
export const postAuthLogin = <TData = AxiosResponse<AuthLoginResponse>>(
    authLoginAndPassword: AuthLoginAndPassword, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/login`,
      authLoginAndPassword,options
    );
  }

/**
 * @summary Determines if the user is authenticated
 */
export const getAuth = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth`,options
    );
  }

/**
 * @summary Retrieves all permission allowances
 */
export const getAuthPermissions = <TData = AxiosResponse<AuthPermissionAllowance[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/permissions`,options
    );
  }

/**
 * @summary Retrieves all allowances given to the user
 */
export const getAuthVisibility = <TData = AxiosResponse<AuthPermissionAllowance[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/visibility`,options
    );
  }

/**
 * @summary Retrieves all users where we have the permissionType specified given to us
 */
export const getAuthVisibilityPermissionType = <TData = AxiosResponse<string[]>>(
    permissionType: 'flight' | 'building' | 'storage' | 'production' | 'workforce' | 'experts' | 'contracts' | 'shipmenttracking', options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/visibility/${permissionType}`,options
    );
  }

/**
 * @summary Refreshes the user's auth token
 */
export const postAuthRefreshauthtoken = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/refreshauthtoken`,undefined,options
    );
  }

/**
 * @summary Changes the user's password
 */
export const postAuthChangepassword = <TData = AxiosResponse<void>>(
    authChangePassword: AuthChangePassword, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/changepassword`,
      authChangePassword,options
    );
  }

/**
 * @summary Add a permission allowance
 */
export const postAuthAddpermission = <TData = AxiosResponse<void>>(
    authPermissionAllowance: AuthPermissionAllowance, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/addpermission`,
      authPermissionAllowance,options
    );
  }

/**
 * @summary Delete a permission allowance
 */
export const postAuthDeletepermissionUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/deletepermission/${userName}`,undefined,options
    );
  }

/**
 * @summary Creates an API key
 */
export const postAuthCreateapikey = <TData = AxiosResponse<void>>(
    authCreateApiKey: AuthCreateApiKey, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/createapikey`,
      authCreateApiKey,options
    );
  }

/**
 * @summary Revokes an API key
 */
export const postAuthRevokeapikey = <TData = AxiosResponse<void>>(
    authRevokeApiKey: AuthRevokeApiKey, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/revokeapikey`,
      authRevokeApiKey,options
    );
  }

/**
 * @summary Lists all API keys
 */
export const postAuthListapikeys = <TData = AxiosResponse<void>>(
    authLoginAndPassword: AuthLoginAndPassword, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/listapikeys`,
      authLoginAndPassword,options
    );
  }

/**
 * @summary Creates a group or modifies an existing group if GroupId is specified
 */
export const postAuthCreategroup = <TData = AxiosResponse<AuthCreateGroupResponse>>(
    authCreateGroupPayload: AuthCreateGroupPayload, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/creategroup`,
      authCreateGroupPayload,options
    );
  }

/**
 * @summary Deletes a group you own by id
 */
export const postAuthDeletegroupGroupId = <TData = AxiosResponse<void>>(
    groupId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/auth/deletegroup/${groupId}`,undefined,options
    );
  }

/**
 * @summary Retrieves all groups owned by the current user
 */
export const getAuthGroups = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/groups`,options
    );
  }

/**
 * @summary Retrieves group by GroupId
 */
export const getAuthGroupGroupId = <TData = AxiosResponse<void>>(
    groupId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/auth/group/${groupId}`,options
    );
  }

/**
 * @summary Check if the user is an administrator
 */
export const getAdmin = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin`,options
    );
  }

/**
 * @summary Checks if the UserName provided exists
 */
export const getAdminUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/${userName}`,options
    );
  }

/**
 * @summary Retrieves a list of all usernames provided data from chat messages
 */
export const getAdminAllusers = <TData = AxiosResponse<string[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/allusers`,options
    );
  }

/**
 * @summary Retrieves a count of all usernames provided data from chat messages
 */
export const getAdminUsercount = <TData = AxiosResponse<number>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/usercount`,options
    );
  }

/**
 * @summary Retrieves request data statistics for this run instance
 */
export const getAdminRequestdata = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/admin/requestdata`,options
    );
  }

/**
 * @summary Creates an account
 */
export const postAdminCreate = <TData = AxiosResponse<void>>(
    adminCreate: AdminCreate, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/create`,
      adminCreate,options
    );
  }

/**
 * @summary Disables an account
 */
export const postAdminDisable = <TData = AxiosResponse<void>>(
    adminDisable: AdminDisable, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/disable`,
      adminDisable,options
    );
  }

/**
 * @summary Clears all CX Data
 */
export const postAdminClearcxdata = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/clearcxdata`,undefined,options
    );
  }

/**
 * @summary Clears all MAT Data
 */
export const postAdminClearmatdata = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/clearmatdata`,undefined,options
    );
  }

/**
 * @summary Clears all JumpCache Data
 */
export const postAdminClearjumpcache = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/clearjumpcache`,undefined,options
    );
  }

/**
 * @deprecated
 * @summary Force update system ids (manual upgrade path)
 */
export const postAdminForceupdatesystemid = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/forceupdatesystemid`,undefined,options
    );
  }

/**
 * @summary Resets the provided username's userdata"
 */
export const postAdminResetuserdataUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/admin/resetuserdata/${userName}`,undefined,options
    );
  }

/**
 * @summary Posts building game data (WorldReactorData) to the server.  For payload, see FIORest source
 */
export const postBuilding = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/building`,undefined,options
    );
  }

/**
 * @summary Gets a list of all buildings (WorldReactorData).
 */
export const getBuildingAllbuildings = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/building/allbuildings`,options
    );
  }

/**
 * @summary Retrieve a payload describing the specified BuildingTicker
 */
export const getBuildingBuildingTicker = <TData = AxiosResponse<void>>(
    buildingTicker: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/building/${buildingTicker}`,options
    );
  }

/**
 * @summary Posts the CHANNEL_DATA payload to the server.  For payload, see FIORest source
 */
export const postChatData = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/chat/data`,undefined,options
    );
  }

/**
 * @summary Posts the CHANNEL_MESSAGE_ADDED payload to the server.  For payload, see FIORest source
 */
export const postChatMessageAdded = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/chat/message_added`,undefined,options
    );
  }

/**
 * @summary Posts the CHANNEL_MESSAGE_DELETED payload to the server.  For payload, see FIORest source
 */
export const postChatMessageDeleted = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/chat/message_deleted`,undefined,options
    );
  }

/**
 * @summary Posts the CHANNEL_MESSAGE_LIST payload to the server.  For payload, see FIORest source
 */
export const postChatMessageList = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/chat/message_list`,undefined,options
    );
  }

/**
 * @summary Retrieves a list of searchable channel names and their corresponding ChannelIds
 */
export const getChatList = <TData = AxiosResponse<ChatListItem[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/chat/list`,options
    );
  }

/**
 * @summary Retrieves the last 300 messages of the provided ChannelDescription
 */
export const getChatDisplayChannelDescription = <TData = AxiosResponse<void>>(
    channelDescription: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/chat/display/${channelDescription}`,options
    );
  }

/**
 * @summary Retrieves the last 300 messages of the provided ChannelDescription in a 'pretty' (textual) format
 */
export const getChatDisplayPrettyChannelDescription = <TData = AxiosResponse<void>>(
    channelDescription: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/chat/display/pretty/${channelDescription}`,options
    );
  }

/**
 * @summary Posts COMPANY_DATA payload.  For payload, see FIORest source
 */
export const postCompany = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/company`,undefined,options
    );
  }

/**
 * @summary Posts COMPANY_DATA_DATA payload.  For payload, see FIORest source
 */
export const postCompanyData = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/company/data`,undefined,options
    );
  }

/**
 * @summary Retrieves company data by CompanyCode
 */
export const getCompanyCodeCompanyCode = <TData = AxiosResponse<void>>(
    companyCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/company/code/${companyCode}`,options
    );
  }

/**
 * @summary Retrieves company data by CompanyName
 */
export const getCompanyNameCompanyName = <TData = AxiosResponse<void>>(
    companyName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/company/name/${companyName}`,options
    );
  }

/**
 * @summary Posts CONTRACTS_CONTRACTS payload. See FIORest source for payload definition
 */
export const postContract = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/contract`,undefined,options
    );
  }

/**
 * @summary Posts CONTRACTS_CONTRACT payload. See FIORest source for payload definition
 */
export const postContractChange = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/contract/change`,undefined,options
    );
  }

/**
 * @summary Retrieves most recent 100 contracts for the current user
 */
export const getContractAllcontracts = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/allcontracts`,options
    );
  }

/**
 * @summary Retrieves most recent 100 contracts for the given UserName
 */
export const getContractAllcontractsUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/allcontracts/${userName}`,options
    );
  }

/**
 * @summary Retrieves contracts which can be extended or are within 1 day of ending
 */
export const getContractConcerns = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/concerns`,options
    );
  }

/**
 * Concerning contracts are defined as contracts which:
1) Can be extended
2) Are within 1 day of ending

 * @summary Retrieves concerning contracts for the given UserName
 */
export const getContractConcernsUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/concerns/${userName}`,options
    );
  }

/**
 * @summary Retrieves loan contracts for the current user
 */
export const getContractLoans = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/loans`,options
    );
  }

/**
 * @summary Retrieves loan contracts for the given UserName
 */
export const getContractLoansUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/loans/${userName}`,options
    );
  }

/**
 * @summary Retrieves taco statistics for EatTacos88
 */
export const getContractTaco = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/taco`,options
    );
  }

/**
 * This will retrieve the location of your shipment, assuming that user
is also present on FIO and has given you the 'ShipmentTracking' permission

 * @summary Retrieves information on the location of your shipments
 */
export const getContractShipments = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/contract/shipments`,options
    );
  }

/**
 * @summary Building information
 */
export const getCsvBuildings = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/buildings`,options
    );
  }

/**
 * @summary Building cost information
 */
export const getCsvBuildingcosts = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/buildingcosts`,options
    );
  }

/**
 * @summary Building workforce information
 */
export const getCsvBuildingworkforces = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/buildingworkforces`,options
    );
  }

/**
 * @summary Building recipe information
 */
export const getCsvBuildingrecipes = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/buildingrecipes`,options
    );
  }

/**
 * @summary Material information
 */
export const getCsvMaterials = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/materials`,options
    );
  }

/**
 * @summary Full price information
 */
export const getCsvPrices = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/prices`,options
    );
  }

/**
 * @summary Price information (condensed horizontally)
 */
export const getCsvPricesCondensed = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/prices/condensed`,options
    );
  }

/**
 * @summary Price order information
 */
export const getCsvOrders = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/orders`,options
    );
  }

/**
 * @summary Price bid information
 */
export const getCsvBids = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/bids`,options
    );
  }

/**
 * @summary Recipe input information
 */
export const getCsvRecipeinputs = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/recipeinputs`,options
    );
  }

/**
 * @summary Recipe output information
 */
export const getCsvRecipeoutputs = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/recipeoutputs`,options
    );
  }

/**
 * @summary Planet information
 */
export const getCsvPlanets = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/planets`,options
    );
  }

/**
 * @summary Planet resource information
 */
export const getCsvPlanetresources = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/planetresources`,options
    );
  }

/**
 * @summary Planet production fee information
 */
export const getCsvPlanetproductionfees = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/planetproductionfees`,options
    );
  }

/**
 * @summary Detailed planet information
 */
export const getCsvPlanetdetail = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/planetdetail`,options
    );
  }

/**
 * @summary System information
 */
export const getCsvSystems = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/systems`,options
    );
  }

/**
 * @summary System links
 */
export const getCsvSystemlinks = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/systemlinks`,options
    );
  }

/**
 * @summary System planet information
 */
export const getCsvSystemplanets = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/systemplanets`,options
    );
  }

/**
 * @summary Infrastructure report for a given planet
 */
export const getCsvInfrastructureReportPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/infrastructure/report/${planet}`,options
    );
  }

/**
 * @summary All infrastructure reports
 */
export const getCsvInfrastructureAllreports = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/infrastructure/allreports`,options
    );
  }

/**
 * @summary Infrastructure infos for a given planet
 */
export const getCsvInfrastructureInfosPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/infrastructure/infos/${planet}`,options
    );
  }

/**
 * @summary All infrastructure infos
 */
export const getCsvInfrastructureAllinfos = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/infrastructure/allinfos`,options
    );
  }

/**
 * @summary All buy ads on a given planet's LM
 */
export const getCsvLocalmarketBuyPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/localmarket/buy/${planet}`,options
    );
  }

/**
 * @summary All sell ads on a given planet's LM
 */
export const getCsvLocalmarketSellPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/localmarket/sell/${planet}`,options
    );
  }

/**
 * @summary All shipping ads on a given planet's LM
 */
export const getCsvLocalmarketShipPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/localmarket/ship/${planet}`,options
    );
  }

/**
 * @summary CXPC data for a given ticker
 */
export const getCsvCxpcTicker = <TData = AxiosResponse<void>>(
    ticker: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/cxpc/${ticker}`,options
    );
  }

/**
 * @summary A specified user's inventory
 */
export const getCsvInventory = <TData = AxiosResponse<void>>(
    params: GetCsvInventoryParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/inventory`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary A specified user's burnrate
 */
export const getCsvBurnrate = <TData = AxiosResponse<void>>(
    params: GetCsvBurnrateParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/burnrate`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary A specified user's sites
 */
export const getCsvSites = <TData = AxiosResponse<void>>(
    params: GetCsvSitesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/sites`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary A specified user's workforce information
 */
export const getCsvWorkforce = <TData = AxiosResponse<void>>(
    params: GetCsvWorkforceParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/workforce`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary A specified user's CXOS trades
 */
export const getCsvCxos = <TData = AxiosResponse<void>>(
    params: GetCsvCxosParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/csv/cxos`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * @summary Posts COMEX_TRADER_ORDERS data payload
 */
export const postCxos = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/cxos`,undefined,options
    );
  }

/**
 * @summary Posts COMEX_TRADER_ORDER_ADDED data payload
 */
export const postCxosAdded = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/cxos/added`,undefined,options
    );
  }

/**
 * @summary Posts COMEX_TRADER_ORDER_REMOVED data payload
 */
export const postCxosRemoved = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/cxos/removed`,undefined,options
    );
  }

/**
 * @summary Posts COMEX_TRADER_ORDER_UPDATED data payload
 */
export const postCxosUpdated = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/cxos/updated`,undefined,options
    );
  }

/**
 * @summary Retrieves CXOS data for provided username.  See FIORest source for payload definition
 */
export const getCxosUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/cxos/${userName}`,options
    );
  }

/**
 * @summary Posts COMEX_BROKER_DATA data payload
 */
export const postExchange = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/exchange`,undefined,options
    );
  }

/**
 * @summary Retrieves Exchange data for the provided ExchangeTicker
 */
export const getExchangeExchangeTicker = <TData = AxiosResponse<void>>(
    exchangeTicker: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/${exchangeTicker}`,options
    );
  }

/**
 * @summary Retrieves summarized information of all exchange data
 */
export const getExchangeAll = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/all`,options
    );
  }

/**
 * @summary Retrieves all the exchange data, including order info
 */
export const getExchangeFull = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/full`,options
    );
  }

/**
 * @summary Retrieves all exchange station data
 */
export const getExchangeStation = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/station`,options
    );
  }

/**
 * @summary Retrieves exchange price chart data for the given ticker
 */
export const getExchangeCxpcExchangeTicker = <TData = AxiosResponse<void>>(
    exchangeTicker: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/cxpc/${exchangeTicker}`,options
    );
  }

/**
 * @summary Retrieves exchange price chart data for the given ticker
 */
export const getExchangeCxpcExchangeTickerTimeStamp = <TData = AxiosResponse<void>>(
    exchangeTicker: string,
    timeStamp: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/cxpc/${exchangeTicker}/${timeStamp}`,options
    );
  }

/**
 * @summary Retrieves a provided company code's orders on all exchanges
 */
export const getExchangeOrdersCompanyCode = <TData = AxiosResponse<void>>(
    companyCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/orders/${companyCode}`,options
    );
  }

/**
 * @summary Retrieves a provided company code's orders on all exchanges
 */
export const getExchangeOrdersCompanyCodeExchangeCode = <TData = AxiosResponse<void>>(
    companyCode: string,
    exchangeCode: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/exchange/orders/${companyCode}/${exchangeCode}`,options
    );
  }

/**
 * @summary Posts COMEX_EXCHANGE_LIST data
 */
export const postGlobalComexexchanges = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/global/comexexchanges`,undefined,options
    );
  }

/**
 * @summary Retrieves COMEX_EXCHANGE_LIST data
 */
export const getGlobalComexexchanges = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/global/comexexchanges`,options
    );
  }

/**
 * @summary Posts COUNTRY_REGISTRY_COUNTRIES data
 */
export const postGlobalCountries = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/global/countries`,undefined,options
    );
  }

/**
 * @summary Retrieves COUNTRY_REGISTRY_COUNTRIES data
 */
export const getGlobalCountries = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/global/countries`,options
    );
  }

/**
 * @summary Posts SIMULATION_DATA data
 */
export const postGlobalSimulationdata = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/global/simulationdata`,undefined,options
    );
  }

/**
 * @summary Retrieves SIMULATION_DATA data
 */
export const getGlobalSimulationdata = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/global/simulationdata`,options
    );
  }

/**
 * @summary Retrieves workforce needs
 */
export const getGlobalWorkforceneeds = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/global/workforceneeds`,options
    );
  }

/**
 * @summary Posts INFRASTRUCTURE_DATA_DATA data payload
 */
export const postInfrastructure = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/infrastructure`,undefined,options
    );
  }

/**
 * @summary Posts INFRASTRUCTURE_PROJECTS_DATA data payload
 */
export const postInfrastructureProject = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/infrastructure/project`,undefined,options
    );
  }

/**
 * @summary Retrieves infrastucture payload for the given PlanetOrInfrastructureId
 */
export const getInfrastructurePlanetOrInfrastructureId = <TData = AxiosResponse<void>>(
    planetOrInfrastructureId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/infrastructure/${planetOrInfrastructureId}`,options
    );
  }

/**
 * @summary Posts LOCAL_MARKET_DATA_DATA data payload
 */
export const postLocalmarket = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/localmarket`,undefined,options
    );
  }

/**
 * @summary Retrieves LocalMarket data for the provided LocalMarketId
 */
export const getLocalmarketLocalMarketId = <TData = AxiosResponse<void>>(
    localMarketId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/localmarket/${localMarketId}`,options
    );
  }

/**
 * @summary Retrieves LocalMarket data for provided Planet
 */
export const getLocalmarketPlanetPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/localmarket/planet/${planet}`,options
    );
  }

/**
 * @summary Retrieves LocalMarket data for provided Planet and specified type
 */
export const getLocalmarketPlanetPlanetType = <TData = AxiosResponse<void>>(
    planet: string,
    type: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/localmarket/planet/${planet}/${type}`,options
    );
  }

/**
 * @summary Retrieves shipping LocalMarket data for the provided Planet where the pick-up location is SourcePlanet
 */
export const getLocalmarketShippingSourceSourcePlanet = <TData = AxiosResponse<void>>(
    sourcePlanet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/localmarket/shipping/source/${sourcePlanet}`,options
    );
  }

/**
 * @summary Retrieves shipping LocalMarket data for the provided Planet where the drop-off location is DestinationPlanet
 */
export const getLocalmarketShippingDestinationDestinationPlanet = <TData = AxiosResponse<void>>(
    destinationPlanet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/localmarket/shipping/destination/${destinationPlanet}`,options
    );
  }

/**
 * @summary Retrieves all ads found by specified Company
 */
export const getLocalmarketCompanyCompany = <TData = AxiosResponse<void>>(
    company: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/localmarket/company/${company}`,options
    );
  }

/**
 * @summary Searches all local markets for a given material
 */
export const postLocalmarketSearch = <TData = AxiosResponse<void>>(
    localMarketSearch: LocalMarketSearch, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/localmarket/search`,
      localMarketSearch,options
    );
  }

/**
 * @summary Posts WORLD_MATERIAL_CATEGORIES payload
 */
export const postMaterial = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/material`,undefined,options
    );
  }

/**
 * @summary Retrieves all materials.  See FIORest source for payload definition
 */
export const getMaterialAllmaterials = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/material/allmaterials`,options
    );
  }

/**
 * @summary Retrieves an individual material by Ticker.  See FIORest source for payload definition
 */
export const getMaterialMaterialTicker = <TData = AxiosResponse<void>>(
    materialTicker: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/material/${materialTicker}`,options
    );
  }

/**
 * @summary Retrieves all materials that belong to the provided CategoryName. See FIORest source for payload definition
 */
export const getMaterialCategoryCategoryName = <TData = AxiosResponse<void>>(
    categoryName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/material/category/${categoryName}`,options
    );
  }

/**
 * @summary Posts PLANET_DATA_DATA payload
 */
export const postPlanet = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/planet`,undefined,options
    );
  }

/**
 * @summary Posts PLANET_COGC_DATA payload
 */
export const postPlanetCogc = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/planet/cogc`,undefined,options
    );
  }

/**
 * @summary Posts PLANET_SITES payload
 */
export const postPlanetSites = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/planet/sites`,undefined,options
    );
  }

/**
 * @summary Searches for a planet given the parameters in the payload
 */
export const postPlanetSearch = <TData = AxiosResponse<void>>(
    planetSearchRequest: PlanetSearchRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/planet/search`,
      planetSearchRequest,options
    );
  }

/**
 * @summary Retrieves a list of all planets (minimal payload)
 */
export const getPlanetAllplanets = <TData = AxiosResponse<PlanetListItem[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/planet/allplanets`,options
    );
  }

/**
 * @summary Retrieves all planet data for all planets
 */
export const getPlanetAllplanetsFull = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/planet/allplanets/full`,options
    );
  }

/**
 * @summary Retrieves planet payload.  See FIORest for payload definition
 */
export const getPlanetPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/planet/${planet}`,options
    );
  }

/**
 * @summary Retrieves the planet sites payload.  See FIORest for payload definition
 */
export const getPlanetSitesPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/planet/sites/${planet}`,options
    );
  }

/**
 * @summary Retrieves the number of planet sites for the provided Planet
 */
export const getPlanetSitescountsPlanet = <TData = AxiosResponse<void>>(
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/planet/sitescounts/${planet}`,options
    );
  }

/**
 * @summary Posts PRODUCTION_SITE_PRODUCTION_LINES payload
 */
export const postProduction = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/production`,undefined,options
    );
  }

/**
 * @summary Retrieve all production lines for provided UserName
 */
export const getProductionUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/production/${userName}`,options
    );
  }

/**
 * @summary Retrieve all the planets where production lines are present for the provided UserName
 */
export const getProductionPlanetsUserName = <TData = AxiosResponse<string[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/production/planets/${userName}`,options
    );
  }

/**
 * @summary Retrieve production line for the given UserName on the specified Planet
 */
export const getProductionUserNamePlanet = <TData = AxiosResponse<GetProductionUserNamePlanet200Item[] | void>>(
    userName: string,
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/production/${userName}/${planet}`,options
    );
  }

/**
 * @summary Retrieves all building data
 */
export const getRainBuildings = <TData = AxiosResponse<RainBuilding[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/buildings`,options
    );
  }

/**
 * @summary Retrieves all building cost data (normalized)
 */
export const getRainBuildingcosts = <TData = AxiosResponse<RainBuildingCost[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/buildingcosts`,options
    );
  }

/**
 * @summary Retrieves all building workforce data (normalized)
 */
export const getRainBuildingworkforces = <TData = AxiosResponse<RainBuildingWorkforce[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/buildingworkforces`,options
    );
  }

/**
 * @summary Retrieves all building recipe data (normalized)
 */
export const getRainBuildingrecipes = <TData = AxiosResponse<RainBuildingRecipe[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/buildingrecipes`,options
    );
  }

/**
 * @summary Retrieves all material data
 */
export const getRainMaterials = <TData = AxiosResponse<RainMaterial[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/materials`,options
    );
  }

/**
 * @summary Retrieves all CX price data
 */
export const getRainPrices = <TData = AxiosResponse<RainPrices[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/prices`,options
    );
  }

/**
 * @summary Retrieves all recipe input data (normalized)
 */
export const getRainRecipeinputs = <TData = AxiosResponse<RainRecipeInput[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/recipeinputs`,options
    );
  }

/**
 * @summary Retrieves all recipe output data (normalized)
 */
export const getRainRecipeoutputs = <TData = AxiosResponse<RainRecipeOutput[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/recipeoutputs`,options
    );
  }

/**
 * @summary Retrieves all planet resource data (normalized)
 */
export const getRainPlanetresources = <TData = AxiosResponse<RainPlanetResource[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/planetresources`,options
    );
  }

/**
 * @summary Retrieves liquid asset data for the given UserName
 */
export const getRainUserliquidUserName = <TData = AxiosResponse<RainLiquid[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userliquid/${userName}`,options
    );
  }

/**
 * @summary Retrieves planets for the given UserName
 */
export const getRainUserplanetsUserName = <TData = AxiosResponse<RainUserPlanet[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanets/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet buildings for the given UserName
 */
export const getRainUserplanetbuildingsUserName = <TData = AxiosResponse<RainPlanetBuilding[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanetbuildings/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet building reclaimables for the given UserName
 */
export const getRainUserplanetbuildingreclaimablesUserName = <TData = AxiosResponse<RainPlanetBuildingReclaimable[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanetbuildingreclaimables/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet production for the given UserName
 */
export const getRainUserplanetproductionUserName = <TData = AxiosResponse<RainPlanetProduction[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanetproduction/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet production inputs for the given UserName
 */
export const getRainUserplanetproductioninputUserName = <TData = AxiosResponse<RainPlanetProductionInput[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanetproductioninput/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet production outputs for the given UserName
 */
export const getRainUserplanetproductionoutputUserName = <TData = AxiosResponse<RainPlanetProductionOutput[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanetproductionoutput/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet production workforces for the given UserName
 */
export const getRainUserplanetworkforceUserName = <TData = AxiosResponse<RainPlanetWorkforce[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userplanetworkforce/${userName}`,options
    );
  }

/**
 * @summary Retrieves planet production workforces for the given UserName
 */
export const getRainUserstorageUserName = <TData = AxiosResponse<RainStorage[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/rain/userstorage/${userName}`,options
    );
  }

/**
 * @summary Retrieves the recipes for a given ticker
 */
export const getRecipesTicker = <TData = AxiosResponse<void>>(
    ticker: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/recipes/${ticker}`,options
    );
  }

/**
 * @summary Retrieve all recipes
 */
export const getRecipesAllrecipes = <TData = AxiosResponse<RecipeMinimalRecipe[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/recipes/allrecipes`,options
    );
  }

/**
 * @summary Posts SHIP_SHIPS payload
 */
export const postShipShips = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/ship/ships`,undefined,options
    );
  }

/**
 * @summary Posts SHIP_FLIGHT_FLIGHTS payload
 */
export const postShipFlights = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/ship/flights`,undefined,options
    );
  }

/**
 * @summary Retrieves ship data
 */
export const getShipShipsUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/ship/ships/${userName}`,options
    );
  }

/**
 * @summary Retrieves ship fuel store data
 */
export const getShipShipsFuelUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/ship/ships/fuel/${userName}`,options
    );
  }

/**
 * @summary Retrieves ship flight data
 */
export const getShipFlightsUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/ship/flights/${userName}`,options
    );
  }

/**
 * @summary Posts SITE_SITES payload
 */
export const postSites = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/sites`,undefined,options
    );
  }

/**
 * @summary Posts STORAGE_WAREHOUSES payload
 */
export const postSitesWarehouses = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/sites/warehouses`,undefined,options
    );
  }

/**
 * @summary Retrieves site data
 */
export const getSitesUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/sites/${userName}`,options
    );
  }

/**
 * @summary Retrieves list of planets user has site data for
 */
export const getSitesPlanetsUserName = <TData = AxiosResponse<string[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/sites/planets/${userName}`,options
    );
  }

/**
 * @summary Retrieves list of planets user has site data for
 */
export const getSitesUserNamePlanet = <TData = AxiosResponse<void>>(
    userName: string,
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/sites/${userName}/${planet}`,options
    );
  }

/**
 * @summary Retrieves all warehouse sites the user has
 */
export const getSitesWarehousesUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/sites/warehouses/${userName}`,options
    );
  }

/**
 * @summary Posts STORAGE_STORAGES payload
 */
export const postStorage = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/storage`,undefined,options
    );
  }

/**
 * @summary Posts STORAGE_CHANGE payload
 */
export const postStorageChange = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/storage/change`,undefined,options
    );
  }

/**
 * @summary Retrieves storage data
 */
export const getStorageUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/storage/${userName}`,options
    );
  }

/**
 * @summary Retrieves list of Planets where storage data exists for UserName
 */
export const getStoragePlanetsUserName = <TData = AxiosResponse<string[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/storage/planets/${userName}`,options
    );
  }

/**
 * @summary Retrieves list of Planets where storage data exists for UserName
 */
export const getStorageUserNameStorageDescription = <TData = AxiosResponse<void>>(
    userName: string,
    storageDescription: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/storage/${userName}/${storageDescription}`,options
    );
  }

/**
 * @summary Posts SYSTEM_STARS_DATA payload
 */
export const postSystemstars = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/systemstars`,undefined,options
    );
  }

/**
 * @summary Retrieves system star data
 */
export const getSystemstars = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/systemstars`,options
    );
  }

/**
 * @summary Posts WORLD_SECTORS payload
 */
export const postSystemstarsWorldsectors = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/systemstars/worldsectors`,undefined,options
    );
  }

/**
 * @summary Retrieves world sector data
 */
export const getSystemstarsWorldsectors = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/systemstars/worldsectors`,options
    );
  }

/**
 * @summary Retrieves jump count from source to destination specified
 */
export const getSystemstarsJumpcountSourceDestination = <TData = AxiosResponse<number>>(
    source: string,
    destination: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/systemstars/jumpcount/${source}/${destination}`,options
    );
  }

/**
 * @summary Retrieves jump route from source to destination specified
 */
export const getSystemstarsJumprouteSourceDestination = <TData = AxiosResponse<SystemStarsJumpRoute[]>>(
    source: string,
    destination: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/systemstars/jumproute/${source}/${destination}`,options
    );
  }

/**
 * @summary Posts SYSTEM_STAR data
 */
export const postSystemstarsStar = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/systemstars/star`,undefined,options
    );
  }

/**
 * @summary Retrieves SYSTEM_STAR data provided a Star definition
 */
export const getSystemstarsStarStar = <TData = AxiosResponse<void>>(
    star: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/systemstars/star/${star}`,options
    );
  }

/**
 * @summary Posts USER_DATA payload
 */
export const postUser = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/user`,undefined,options
    );
  }

/**
 * @summary Retrieves all FIO users
 */
export const getUserAllusers = <TData = AxiosResponse<string[]>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user/allusers`,options
    );
  }

/**
 * @summary Retrieves userdata for specified UserName
 */
export const getUserUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/user/${userName}`,options
    );
  }

/**
 * This will delete the following data for your User:
1) Company data
2) ProductionLine data
3) Ship data
4) Site data
5) Workforce data
6) User data
7) Warehouse data
8) Contract data

You should only use this if your data has been corrupted by excess hydration timeouts

 * @summary Resets the current user's data.
 */
export const postUserResetalldata = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/user/resetalldata`,undefined,options
    );
  }

/**
 * @summary Currently unused.  Will be used in the future
 */
export const postUsersettingsGeneral = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/usersettings/general`,undefined,options
    );
  }

/**
 * @summary Currently unused.  Will be used in the future
 */
export const getUsersettingsGeneral = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/usersettings/general`,options
    );
  }

/**
 * @summary Currently unused.  Will be used in the future
 */
export const getUsersettingsGeneralUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/usersettings/general/${userName}`,options
    );
  }

/**
 * @summary Adds a BurnRateExclusion
 */
export const postUsersettingsBurnrateAddexclusion = <TData = AxiosResponse<void>>(
    userSettingsBurnRateExclusionBody: UserSettingsBurnRateExclusionBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/usersettings/burnrate/addexclusion`,
      userSettingsBurnRateExclusionBody,options
    );
  }

/**
 * @summary Deletes a BurnRateExclusion
 */
export const postUsersettingsBurnrateDeleteexclusion = <TData = AxiosResponse<void>>(
    userSettingsBurnRateExclusionBody: UserSettingsBurnRateExclusionBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/usersettings/burnrate/deleteexclusion`,
      userSettingsBurnRateExclusionBody,options
    );
  }

/**
 * @summary Retrieves BurnRateSettings for the specified user
 */
export const getUsersettingsBurnrateUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/usersettings/burnrate/${userName}`,options
    );
  }

/**
 * @summary Retrivies BurnRateSettings for the specified user on the specified planet
 */
export const getUsersettingsBurnrateUserNamePlanetNaturalId = <TData = AxiosResponse<void>>(
    userName: string,
    planetNaturalId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/usersettings/burnrate/${userName}/${planetNaturalId}`,options
    );
  }

/**
 * @summary Currently unused.  Will be used in the future
 */
export const postUsersettingsBurnrateYellowthreshold = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/usersettings/burnrate/yellowthreshold`,undefined,options
    );
  }

/**
 * @summary Currently unused.  Will be used in the future
 */
export const postUsersettingsBurnrateRedthreshold = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/usersettings/burnrate/redthreshold`,undefined,options
    );
  }

/**
 * @summary Retrieves latest version number of the FIOUI
 */
export const getVersionLatest = <TData = AxiosResponse<string | void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/version/latest`,options
    );
  }

/**
 * @summary Retrieves latest version release notes of the FIOUI as an rtf file
 */
export const getVersionReleasenotes = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/version/releasenotes`,options
    );
  }

/**
 * @summary Retrieves latest FIOUI setup executable
 */
export const getVersionDownload = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/version/download`,options
    );
  }

/**
 * @summary Redirects you to to the FIO Chrome Extension page
 */
export const getVersionExtensionDownload = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/version/extension/download`,options
    );
  }

/**
 * @summary Retrieves the latest version of the FIO uploader script
 */
export const getVersionExtensionScript = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/version/extension/script`,options
    );
  }

/**
 * @summary Posts WORKFORCE_WORKFORCES payload
 */
export const postWorkforce = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.post(
      `/workforce`,undefined,options
    );
  }

/**
 * @summary Retrieves workforce data for the specified user
 */
export const getWorkforceUserName = <TData = AxiosResponse<void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/workforce/${userName}`,options
    );
  }

/**
 * @summary Retrieves list of planets where the specified user has Workforce data
 */
export const getWorkforcePlanetsUserName = <TData = AxiosResponse<string[] | void>>(
    userName: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/workforce/planets/${userName}`,options
    );
  }

/**
 * @summary Retrieves workforce data for the specified usernaem and planet
 */
export const getWorkforceUserNamePlanet = <TData = AxiosResponse<void>>(
    userName: string,
    planet: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/workforce/${userName}/${planet}`,options
    );
  }

export type PostAuthLoginResult = AxiosResponse<AuthLoginResponse>
export type GetAuthResult = AxiosResponse<void>
export type GetAuthPermissionsResult = AxiosResponse<AuthPermissionAllowance[]>
export type GetAuthVisibilityResult = AxiosResponse<AuthPermissionAllowance[]>
export type GetAuthVisibilityPermissionTypeResult = AxiosResponse<string[]>
export type PostAuthRefreshauthtokenResult = AxiosResponse<void>
export type PostAuthChangepasswordResult = AxiosResponse<void>
export type PostAuthAddpermissionResult = AxiosResponse<void>
export type PostAuthDeletepermissionUserNameResult = AxiosResponse<void>
export type PostAuthCreateapikeyResult = AxiosResponse<void>
export type PostAuthRevokeapikeyResult = AxiosResponse<void>
export type PostAuthListapikeysResult = AxiosResponse<void>
export type PostAuthCreategroupResult = AxiosResponse<AuthCreateGroupResponse>
export type PostAuthDeletegroupGroupIdResult = AxiosResponse<void>
export type GetAuthGroupsResult = AxiosResponse<void>
export type GetAuthGroupGroupIdResult = AxiosResponse<void>
export type GetAdminResult = AxiosResponse<void>
export type GetAdminUserNameResult = AxiosResponse<void>
export type GetAdminAllusersResult = AxiosResponse<string[]>
export type GetAdminUsercountResult = AxiosResponse<number>
export type GetAdminRequestdataResult = AxiosResponse<void>
export type PostAdminCreateResult = AxiosResponse<void>
export type PostAdminDisableResult = AxiosResponse<void>
export type PostAdminClearcxdataResult = AxiosResponse<void>
export type PostAdminClearmatdataResult = AxiosResponse<void>
export type PostAdminClearjumpcacheResult = AxiosResponse<void>
export type PostAdminForceupdatesystemidResult = AxiosResponse<void>
export type PostAdminResetuserdataUserNameResult = AxiosResponse<void>
export type PostBuildingResult = AxiosResponse<void>
export type GetBuildingAllbuildingsResult = AxiosResponse<void>
export type GetBuildingBuildingTickerResult = AxiosResponse<void>
export type PostChatDataResult = AxiosResponse<void>
export type PostChatMessageAddedResult = AxiosResponse<void>
export type PostChatMessageDeletedResult = AxiosResponse<void>
export type PostChatMessageListResult = AxiosResponse<void>
export type GetChatListResult = AxiosResponse<ChatListItem[]>
export type GetChatDisplayChannelDescriptionResult = AxiosResponse<void>
export type GetChatDisplayPrettyChannelDescriptionResult = AxiosResponse<void>
export type PostCompanyResult = AxiosResponse<void>
export type PostCompanyDataResult = AxiosResponse<void>
export type GetCompanyCodeCompanyCodeResult = AxiosResponse<void>
export type GetCompanyNameCompanyNameResult = AxiosResponse<void>
export type PostContractResult = AxiosResponse<void>
export type PostContractChangeResult = AxiosResponse<void>
export type GetContractAllcontractsResult = AxiosResponse<void>
export type GetContractAllcontractsUserNameResult = AxiosResponse<void>
export type GetContractConcernsResult = AxiosResponse<void>
export type GetContractConcernsUserNameResult = AxiosResponse<void>
export type GetContractLoansResult = AxiosResponse<void>
export type GetContractLoansUserNameResult = AxiosResponse<void>
export type GetContractTacoResult = AxiosResponse<void>
export type GetContractShipmentsResult = AxiosResponse<void>
export type GetCsvBuildingsResult = AxiosResponse<void>
export type GetCsvBuildingcostsResult = AxiosResponse<void>
export type GetCsvBuildingworkforcesResult = AxiosResponse<void>
export type GetCsvBuildingrecipesResult = AxiosResponse<void>
export type GetCsvMaterialsResult = AxiosResponse<void>
export type GetCsvPricesResult = AxiosResponse<void>
export type GetCsvPricesCondensedResult = AxiosResponse<void>
export type GetCsvOrdersResult = AxiosResponse<void>
export type GetCsvBidsResult = AxiosResponse<void>
export type GetCsvRecipeinputsResult = AxiosResponse<void>
export type GetCsvRecipeoutputsResult = AxiosResponse<void>
export type GetCsvPlanetsResult = AxiosResponse<void>
export type GetCsvPlanetresourcesResult = AxiosResponse<void>
export type GetCsvPlanetproductionfeesResult = AxiosResponse<void>
export type GetCsvPlanetdetailResult = AxiosResponse<void>
export type GetCsvSystemsResult = AxiosResponse<void>
export type GetCsvSystemlinksResult = AxiosResponse<void>
export type GetCsvSystemplanetsResult = AxiosResponse<void>
export type GetCsvInfrastructureReportPlanetResult = AxiosResponse<void>
export type GetCsvInfrastructureAllreportsResult = AxiosResponse<void>
export type GetCsvInfrastructureInfosPlanetResult = AxiosResponse<void>
export type GetCsvInfrastructureAllinfosResult = AxiosResponse<void>
export type GetCsvLocalmarketBuyPlanetResult = AxiosResponse<void>
export type GetCsvLocalmarketSellPlanetResult = AxiosResponse<void>
export type GetCsvLocalmarketShipPlanetResult = AxiosResponse<void>
export type GetCsvCxpcTickerResult = AxiosResponse<void>
export type GetCsvInventoryResult = AxiosResponse<void>
export type GetCsvBurnrateResult = AxiosResponse<void>
export type GetCsvSitesResult = AxiosResponse<void>
export type GetCsvWorkforceResult = AxiosResponse<void>
export type GetCsvCxosResult = AxiosResponse<void>
export type PostCxosResult = AxiosResponse<void>
export type PostCxosAddedResult = AxiosResponse<void>
export type PostCxosRemovedResult = AxiosResponse<void>
export type PostCxosUpdatedResult = AxiosResponse<void>
export type GetCxosUserNameResult = AxiosResponse<void>
export type PostExchangeResult = AxiosResponse<void>
export type GetExchangeExchangeTickerResult = AxiosResponse<void>
export type GetExchangeAllResult = AxiosResponse<void>
export type GetExchangeFullResult = AxiosResponse<void>
export type GetExchangeStationResult = AxiosResponse<void>
export type GetExchangeCxpcExchangeTickerResult = AxiosResponse<void>
export type GetExchangeCxpcExchangeTickerTimeStampResult = AxiosResponse<void>
export type GetExchangeOrdersCompanyCodeResult = AxiosResponse<void>
export type GetExchangeOrdersCompanyCodeExchangeCodeResult = AxiosResponse<void>
export type PostGlobalComexexchangesResult = AxiosResponse<void>
export type GetGlobalComexexchangesResult = AxiosResponse<void>
export type PostGlobalCountriesResult = AxiosResponse<void>
export type GetGlobalCountriesResult = AxiosResponse<void>
export type PostGlobalSimulationdataResult = AxiosResponse<void>
export type GetGlobalSimulationdataResult = AxiosResponse<void>
export type GetGlobalWorkforceneedsResult = AxiosResponse<void>
export type PostInfrastructureResult = AxiosResponse<void>
export type PostInfrastructureProjectResult = AxiosResponse<void>
export type GetInfrastructurePlanetOrInfrastructureIdResult = AxiosResponse<void>
export type PostLocalmarketResult = AxiosResponse<void>
export type GetLocalmarketLocalMarketIdResult = AxiosResponse<void>
export type GetLocalmarketPlanetPlanetResult = AxiosResponse<void>
export type GetLocalmarketPlanetPlanetTypeResult = AxiosResponse<void>
export type GetLocalmarketShippingSourceSourcePlanetResult = AxiosResponse<void>
export type GetLocalmarketShippingDestinationDestinationPlanetResult = AxiosResponse<void>
export type GetLocalmarketCompanyCompanyResult = AxiosResponse<void>
export type PostLocalmarketSearchResult = AxiosResponse<void>
export type PostMaterialResult = AxiosResponse<void>
export type GetMaterialAllmaterialsResult = AxiosResponse<void>
export type GetMaterialMaterialTickerResult = AxiosResponse<void>
export type GetMaterialCategoryCategoryNameResult = AxiosResponse<void>
export type PostPlanetResult = AxiosResponse<void>
export type PostPlanetCogcResult = AxiosResponse<void>
export type PostPlanetSitesResult = AxiosResponse<void>
export type PostPlanetSearchResult = AxiosResponse<void>
export type GetPlanetAllplanetsResult = AxiosResponse<PlanetListItem[]>
export type GetPlanetAllplanetsFullResult = AxiosResponse<void>
export type GetPlanetPlanetResult = AxiosResponse<void>
export type GetPlanetSitesPlanetResult = AxiosResponse<void>
export type GetPlanetSitescountsPlanetResult = AxiosResponse<void>
export type PostProductionResult = AxiosResponse<void>
export type GetProductionUserNameResult = AxiosResponse<void>
export type GetProductionPlanetsUserNameResult = AxiosResponse<string[] | void>
export type GetProductionUserNamePlanetResult = AxiosResponse<GetProductionUserNamePlanet200Item[] | void>
export type GetRainBuildingsResult = AxiosResponse<RainBuilding[]>
export type GetRainBuildingcostsResult = AxiosResponse<RainBuildingCost[]>
export type GetRainBuildingworkforcesResult = AxiosResponse<RainBuildingWorkforce[]>
export type GetRainBuildingrecipesResult = AxiosResponse<RainBuildingRecipe[]>
export type GetRainMaterialsResult = AxiosResponse<RainMaterial[]>
export type GetRainPricesResult = AxiosResponse<RainPrices[]>
export type GetRainRecipeinputsResult = AxiosResponse<RainRecipeInput[]>
export type GetRainRecipeoutputsResult = AxiosResponse<RainRecipeOutput[]>
export type GetRainPlanetresourcesResult = AxiosResponse<RainPlanetResource[]>
export type GetRainUserliquidUserNameResult = AxiosResponse<RainLiquid[] | void>
export type GetRainUserplanetsUserNameResult = AxiosResponse<RainUserPlanet[] | void>
export type GetRainUserplanetbuildingsUserNameResult = AxiosResponse<RainPlanetBuilding[] | void>
export type GetRainUserplanetbuildingreclaimablesUserNameResult = AxiosResponse<RainPlanetBuildingReclaimable[] | void>
export type GetRainUserplanetproductionUserNameResult = AxiosResponse<RainPlanetProduction[] | void>
export type GetRainUserplanetproductioninputUserNameResult = AxiosResponse<RainPlanetProductionInput[] | void>
export type GetRainUserplanetproductionoutputUserNameResult = AxiosResponse<RainPlanetProductionOutput[] | void>
export type GetRainUserplanetworkforceUserNameResult = AxiosResponse<RainPlanetWorkforce[] | void>
export type GetRainUserstorageUserNameResult = AxiosResponse<RainStorage[] | void>
export type GetRecipesTickerResult = AxiosResponse<void>
export type GetRecipesAllrecipesResult = AxiosResponse<RecipeMinimalRecipe[]>
export type PostShipShipsResult = AxiosResponse<void>
export type PostShipFlightsResult = AxiosResponse<void>
export type GetShipShipsUserNameResult = AxiosResponse<void>
export type GetShipShipsFuelUserNameResult = AxiosResponse<void>
export type GetShipFlightsUserNameResult = AxiosResponse<void>
export type PostSitesResult = AxiosResponse<void>
export type PostSitesWarehousesResult = AxiosResponse<void>
export type GetSitesUserNameResult = AxiosResponse<void>
export type GetSitesPlanetsUserNameResult = AxiosResponse<string[] | void>
export type GetSitesUserNamePlanetResult = AxiosResponse<void>
export type GetSitesWarehousesUserNameResult = AxiosResponse<void>
export type PostStorageResult = AxiosResponse<void>
export type PostStorageChangeResult = AxiosResponse<void>
export type GetStorageUserNameResult = AxiosResponse<void>
export type GetStoragePlanetsUserNameResult = AxiosResponse<string[] | void>
export type GetStorageUserNameStorageDescriptionResult = AxiosResponse<void>
export type PostSystemstarsResult = AxiosResponse<void>
export type GetSystemstarsResult = AxiosResponse<void>
export type PostSystemstarsWorldsectorsResult = AxiosResponse<void>
export type GetSystemstarsWorldsectorsResult = AxiosResponse<void>
export type GetSystemstarsJumpcountSourceDestinationResult = AxiosResponse<number>
export type GetSystemstarsJumprouteSourceDestinationResult = AxiosResponse<SystemStarsJumpRoute[]>
export type PostSystemstarsStarResult = AxiosResponse<void>
export type GetSystemstarsStarStarResult = AxiosResponse<void>
export type PostUserResult = AxiosResponse<void>
export type GetUserAllusersResult = AxiosResponse<string[]>
export type GetUserUserNameResult = AxiosResponse<void>
export type PostUserResetalldataResult = AxiosResponse<void>
export type PostUsersettingsGeneralResult = AxiosResponse<void>
export type GetUsersettingsGeneralResult = AxiosResponse<void>
export type GetUsersettingsGeneralUserNameResult = AxiosResponse<void>
export type PostUsersettingsBurnrateAddexclusionResult = AxiosResponse<void>
export type PostUsersettingsBurnrateDeleteexclusionResult = AxiosResponse<void>
export type GetUsersettingsBurnrateUserNameResult = AxiosResponse<void>
export type GetUsersettingsBurnrateUserNamePlanetNaturalIdResult = AxiosResponse<void>
export type PostUsersettingsBurnrateYellowthresholdResult = AxiosResponse<void>
export type PostUsersettingsBurnrateRedthresholdResult = AxiosResponse<void>
export type GetVersionLatestResult = AxiosResponse<string | void>
export type GetVersionReleasenotesResult = AxiosResponse<void>
export type GetVersionDownloadResult = AxiosResponse<void>
export type GetVersionExtensionDownloadResult = AxiosResponse<void>
export type GetVersionExtensionScriptResult = AxiosResponse<void>
export type PostWorkforceResult = AxiosResponse<void>
export type GetWorkforceUserNameResult = AxiosResponse<void>
export type GetWorkforcePlanetsUserNameResult = AxiosResponse<string[] | void>
export type GetWorkforceUserNamePlanetResult = AxiosResponse<void>
